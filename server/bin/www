#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var api = require('../api');
var debug = require('debug')('Signal monitor:server');
var http = require('http');


var bpmn=require('bpmn');

var port = 8080;
var counter = 0;
var manager = new bpmn.ProcessManager();
manager.addBpmnFilePath("C:\\Users\\yamina\\Desktop\\pfe2\\real-time-signal-monitoring-poc\\server\\tasks\\taskExampleProcess.bpmn");
var server = manager.createServer({ logLevel: bpmn.logLevels.error, createProcessId: function() {
    return ("_my_custom_id_" + counter++);
}});

server.listen(8080, function() {
	console.log('magic happens on', server.name, server.url);
});



// /**
//  * Get port from environment and store in Express.
//  */
//
// var port = normalizePort(process.env.PORT || '8080');
// app.set('port', port);
// // Returns a restify server.
//
//
//
//
// /**
//  * Create HTTP server.
//  */
//  var server = http.createServer(app);
//
// /**
//  * Listen on provided port, on all network interfaces.
//  */
//
// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);
//
// /**
//  * Normalize a port into a number, string, or false.
//  */
//
// function normalizePort(val) {
//   var port = parseInt(val, 10);
//
//   if (isNaN(port)) {
//     // named pipe
//     return val;
//   }
//
//   if (port >= 0) {
//     // port number
//     return port;
//   }
//
//   return false;
// }
//
// /**
//  * Event listener for HTTP server "error" event.
//  */
//
// function onError(error) {
//   if (error.syscall !== 'listen') {
//     throw error;
//   }
//
//   var bind = typeof port === 'string'
//     ? 'Pipe ' + port
//     : 'Port ' + port;
//
//   // handle specific listen errors with friendly messages
//   switch (error.code) {
//     case 'EACCES':
//       console.error(bind + ' requires elevated privileges');
//       process.exit(1);
//       break;
//     case 'EADDRINUSE':
//       console.error(bind + ' is already in use');
//       process.exit(1);
//       break;
//     default:
//       throw error;
//   }
// }
//
// /**
//  * Event listener for HTTP server "listening" event.
//  */
//
// function onListening() {
//   var addr = server.address();
//   var bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//   debug('Listening on ' + bind);
// }
